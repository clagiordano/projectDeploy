#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  projectDeploy
#
#  Version 2.0
#
#  Copyright 2014 - 2015 Claudio Giordano <claudio.giordano@autistici.org>
#
#  Homepage https://github.com/clagiordano/projectDeploy.git
#  Homepage https://clagiordano@bitbucket.org/clagiordano/projectDeploy.git
#
#  License GPLv3 https://www.gnu.org/licenses/gpl.html

import sys
import os
import tempfile
import ConfigParser
import argparse
from distutils.spawn import find_executable
import subprocess
import ConfigParser

""" Local import """
import outputUtils as out
from ProjectDeployConfiguration import ProjectDeployConfiguration

"""
Main class 
"""
class ProjectDeploy(object):
    def setDeployConfig(self):
        # Create base config object as default config
        self.Configuration = ProjectDeployConfiguration()
        #~ print self.Configuration
                
        # Read custom config file if present (override default)
        # TODO: import config from bash config to python vars
        #~ if [ -e "${CONFIG_CONF_PATH}" ];
        if os.path.isfile(self.Configuration.configPath) \
            and os.access(self.Configuration.configPath, os.R_OK):
                out.success("Found custom config file.")
                self.Configuration.readConfigFile(self.Configuration.configPath)
        #~ then
            #~ success "Found custom config file.";

            #~ if eval ". ${CONFIG_CONF_PATH}"
            #~ then
                #~ success "Import custom config file.";
            #~ else
                #~ fatalError "Import custom config file.";
            #~ fi
        #~ fi
        
        # Parse command line args (override default and custom config)
        #~ parseArgs $*;
        #echo "[$(date +'%Y-%m-%d %H:%M:%S')]: $*" >> "${CONFIG_LOG_PATH}";
        pass
    
    def setArgParser(self):
        parser = argparse.ArgumentParser()
        #~ parser.add_argument("-d", "--dialog", action='store_true', help="Enable dialog output")
        parser.add_argument("-v", "--verbose", action='store_true', help="Enable verbose output")
        parser.add_argument("-t", "--text", action='store_true', help="Enable text output")
        parser.add_argument("-b", "--debug", action='store_true', help="Enable debug output")
        parser.add_argument("-m", "--multitarget", action='store_true', help="Enable multi target mode")
        parser.add_argument("-r", "--root", help="Change projects root")
        
        args = parser.parse_args()
        #~ out.debug(args, self.Configuration.debugMode)
        
    """
    Check presence of required bynary file
    """
    def binaryCheck(self, commandToCheck, isRequired):
        out.debug("[binaryCheck]: commandToCheck %s, isRequired %s" \
            % (commandToCheck, isRequired), self.Configuration.debugMode)
        executable = find_executable(commandToCheck)
        #~ print "[Debug]: %s" % (executable)
        if (executable and isRequired):
            out.success("Found required " + commandToCheck + " in path " + executable)
        if (executable and not isRequired):
            out.success("Found optional " + commandToCheck + " in path " + executable)
        elif (not executable and not isRequired):
            out.warning("Cannot find optional" + commandToCheck)
        elif (not executable and isRequired):
            out.fatalError("Cannot find requested " + commandToCheck)

    def printList(self, listData):
        pass

    def __init__(self):
        subprocess.call("clear")
        
        self.setArgParser()
        
        # Set deploy config
        self.setDeployConfig()
        
        # Check binary files
        self.binaryCheck("git", False)
        self.binaryCheck("rsync", True)
        
        # Global counters
        self.syncSuccess = 0
        self.syncFailed = 0
        

if __name__ == "__main__":
    projectdeploy = ProjectDeploy()
