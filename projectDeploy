#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  projectDeploy
#
#  Version 2.0
#
#  Copyright 2014 - 2015 Claudio Giordano <claudio.giordano@autistici.org>
#
#  Homepage https://github.com/clagiordano/projectDeploy.git
#  Homepage https://clagiordano@bitbucket.org/clagiordano/projectDeploy.git
#
#  License GPLv3 https://www.gnu.org/licenses/gpl.html

import sys
import os
import tempfile
import ConfigParser
import argparse
from distutils.spawn import find_executable
import subprocess
import ConfigParser
import re

""" Local import """
import modules.outputUtils as out
from modules.projectDeployConfiguration import ProjectDeployConfiguration

"""
Main class
"""
class ProjectDeploy(object):
    def setDeployConfig(self):
        #~ print self.Configuration

        # Read custom config file if present (override default)
        # TODO: import config from bash config to python vars
        #~ if [ -e "${CONFIG_CONF_PATH}" ];
        if os.path.isfile(self.Configuration.configPath) \
            and os.access(self.Configuration.configPath, os.R_OK):
                out.success("Found custom config file.")
                self.Configuration.readConfigFile(self.Configuration.configPath)
        #~ then
            #~ success "Found custom config file.";

            #~ if eval ". ${CONFIG_CONF_PATH}"
            #~ then
                #~ success "Import custom config file.";
            #~ else
                #~ fatalError "Import custom config file.";
            #~ fi
        #~ fi

        # Parse command line args (override default and custom config)
        #~ parseArgs $*;
        #echo "[$(date +'%Y-%m-%d %H:%M:%S')]: $*" >> "${CONFIG_LOG_PATH}";

        if (self.argsParsed.root):
            out.success("Override default projects root to '" + self.argsParsed.root + "'")
            self.Configuration.defaultProjectsRoot = self.argsParsed.root
        pass

    def setArgParser(self):
        parser = argparse.ArgumentParser()
        #~ parser.add_argument("-d", "--dialog", action='store_true', help="Enable dialog output")
        parser.add_argument("-v", "--verbose", action='store_true', help="Enable verbose output")
        parser.add_argument("-t", "--text", action='store_true', help="Enable text output")
        parser.add_argument("-b", "--debug", action='store_true', help="Enable debug output")
        parser.add_argument("-m", "--multitarget", action='store_true', help="Enable multi target mode")
        parser.add_argument("-r", "--root", help="Change projects root")

        self.argsParsed = parser.parse_args()
        #print "[Debug]: %s" % (self.argsParsed)

    """
    Check presence of required bynary file
    """
    def binaryCheck(self, commandToCheck, isRequired):
        out.debug("[binaryCheck]: commandToCheck %s, isRequired %s" \
            % (commandToCheck, isRequired), self.Configuration.debugMode)
        executable = find_executable(commandToCheck)
        #~ print "[Debug]: %s" % (executable)
        if (executable and isRequired):
            out.success("Found required " + commandToCheck + " in path " + executable)
        if (executable and not isRequired):
            out.success("Found optional " + commandToCheck + " in path " + executable)
        elif (not executable and not isRequired):
            out.warning("Cannot find optional" + commandToCheck)
        elif (not executable and isRequired):
            out.fatalError("Cannot find requested " + commandToCheck)

    def createProjectsList(self):
        self.projectsList = {}
        if (os.path.isdir(self.Configuration.defaultProjectsRoot)):
            dirContent = os.listdir(self.Configuration.defaultProjectsRoot)
            dirContent.sort()
            # print "[Debug]: %s" % (dirContent.sort())
            index = 1
            for element in dirContent:
                # print "[Debug]: %s" % (element)
                if (os.path.isdir(self.Configuration.defaultProjectsRoot + "/" + element)):
                    self.projectsList[index] = element
                    index += 1
            out.debug(self.projectsList, self.Configuration.debugMode)
            # print(self.projectsList)
        else:
            out.fatalError("Invalid project root '" + self.Configuration.defaultProjectsRoot + "'")

    def selectFromList(self, selectionList):
        listTitle = "%s [ \033[1;34m%s\033[0m ]: " % \
            (self.Configuration.dialogTitle, self.Configuration.defaultProjectsRoot)
        self.printList(selectionList, listTitle)

        choosed = False
        while (choosed == False):
            selection = raw_input(self.Configuration.deploySelectFromListMsg)
            out.debug("Selection input: " + selection, self.Configuration.debugMode)
            if (selection == "0"):
                out.warning(self.Configuration.deployAbortMsg)
                sys.exit(0)
            elif (re.match("^(\d+)$", selection)):
                #~ print "[Debug]: regexp match"
                #~ print "[Debug]: len %s" % (len(selectionList))
                selection = int(selection)
                if (selection > 0 and selection < len(selectionList)):
                    choosed = True
                    # print "[Debug]: %s" % ("PIPPO")
                    # print "[Debug]: debugMode: %s" % (self.Configuration.debugMode)
                    out.debug("         SELECTION: " + str(selection), self.Configuration.debugMode)
                    out.debug("          SELECTED: '" + selectionList[selection] +  "'", self.Configuration.debugMode)
                    self.confirmProjectSelection(selectionList[selection])
                else:
                    out.error("Invalid choice '\033[1;31m" + str(selection)
                        + "\033[0m', please insert only the number corresponding to an element of the list.\n");
            else:
                out.error("Invalid choice '\033[1;31m" + str(selection)
                    + "\033[0m', please insert only the number corresponding to an element of the list.\n");

    def confirmProjectSelection(self, selectedElement):
        # subprocess.call("clear")
        print ""
        out.success("Selected element '\033[1;32m" + selectedElement + "\033[0m'")
        self.selectedElement = selectedElement
        self.projectConfigDir = self.Configuration.basePath + "/" + self.selectedElement

    def selectTargets(self):
        if (not os.path.isdir(self.projectConfigDir)):
            out.warning("Missing configuration directory, created empty at '\033[1;32m" + self.projectConfigDir + "\033[0m'")
            os.mkdir(self.projectConfigDir)

        self.targetFilePath = self.projectConfigDir + "/" + self.Configuration.syncTargetsFile
        self.multiTargetFilePath = self.projectConfigDir + "/" + self.Configuration.syncMultiTargetsFile

        self.targetsAvailable = os.path.isfile(self.targetFilePath)
        self.multiTargetsAvailable = os.path.isfile(self.multiTargetFilePath)

        if ((self.targetsAvailable == False) \
            and (self.multiTargetsAvailable == False)):
            out.fatalError("No targets file detected!")

        if (self.multiTargetsAvailable):
            choosed = False
            while (choosed == False):
                selection = raw_input("Enable multi target mode for this project? [y/N] ")
                if (selection == "y" or selection == "Y"):
                    self.Configuration.multitargetMode = True
                    out.success("Multi targets mode ENABLED")

                choosed = True


    def printList(self, listData, listHeader = "Select an element from list:"):
        #~ List header with empty line before
        print "\n%s\n" % (listHeader)

        #~ Print numbered formatted list
        for elementId in listData:
            # print "[\033[1;34m%4d\033[0m]: %s" % (elementId, listData[elementId])
            sys.stdout.write( \
                "[\033[1;34m%4d\033[0m]: %-25s" \
                % (elementId, listData[elementId][0:24]) \
            )

            if ((elementId % 3) == 0):
                print ""

        #~ Empty row after list
        print ""

    def __init__(self):
        subprocess.call("clear")

        # Create base config object as default config
        self.Configuration = ProjectDeployConfiguration()

        self.setArgParser()

        # Set deploy config
        self.setDeployConfig()

        # Check binary files
        self.binaryCheck("git", False)
        self.binaryCheck("rsync", True)

        # Global counters
        self.syncSuccess = 0
        self.syncFailed = 0

        self.createProjectsList()
        self.selectFromList(self.projectsList)
        self.selectTargets()
        #~ filename = raw_input('Enter a file name: ')


if __name__ == "__main__":
    try:
        projectdeploy = ProjectDeploy()
    except KeyboardInterrupt as e:
        print "\n"
        out.warning("CTRL-C detected, deploy aborted!")
