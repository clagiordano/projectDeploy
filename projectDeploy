#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  projectDeploy
#
#  Version 2.0
#
#  Copyright 2014 - 2015 Claudio Giordano <claudio.giordano@autistici.org>
#
#  Homepage https://github.com/clagiordano/projectDeploy.git
#  Homepage https://clagiordano@bitbucket.org/clagiordano/projectDeploy.git
#
#  License GPLv3 https://www.gnu.org/licenses/gpl.html

import sys
import os
import argparse
from distutils.spawn import find_executable
import subprocess
import shlex
import re
import ConfigParser

"""
Local import
"""
import modules.outputUtils as out
import modules.confirm as confirm
from modules.projectDeployConfiguration import ProjectDeployConfiguration
import modules.utils as utils
from modules.webHooks import webHooks

"""
Main class
"""
class ProjectDeploy(object):
    argsParsed = None
    webhook = None
    destinationsList = None
    projectsList = None
    targetFilePath = None
    multiTargetFilePath = None
    targetsAvailable = None
    multiTargetsAvailable = None
    ignoreFile = None
    hook_color = ""
    hook_message = ""
    session_info = {}

    def setDeployConfig(self):
        #~ print self.Configuration

        # Read custom config file if present (override default)
        # TODO: import config from bash config to python vars
        #~ if [ -e "${CONFIG_CONF_PATH}" ];
        if os.path.isfile(self.Configuration.configPath) \
            and os.access(self.Configuration.configPath, os.R_OK):
            out.success("Found custom config file.")
            self.Configuration.readConfigFile(self.Configuration.configPath)
        #~ then
            #~ success "Found custom config file.";

            #~ if eval ". ${CONFIG_CONF_PATH}"
            #~ then
                #~ success "Import custom config file.";
            #~ else
                #~ fatalError "Import custom config file.";
            #~ fi
        #~ fi

        # Parse command line args (override default and custom config)
        #~ parseArgs $*;
        #echo "[$(date +'%Y-%m-%d %H:%M:%S')]: $*" >> "${CONFIG_LOG_PATH}";

        if self.argsParsed.root:
            out.success("Override default projects root to '" + self.argsParsed.root + "'")
            self.Configuration.defaultProjectsRoot = self.argsParsed.root

    def setArgParser(self):
        parser = argparse.ArgumentParser()
        #~ parser.add_argument("-d", "--dialog", action='store_true', help="Enable dialog output")
        parser.add_argument("-v", "--verbose", action='store_true', help="Enable verbose output")
        parser.add_argument("-t", "--text", action='store_true', help="Enable text output")
        parser.add_argument("-b", "--debug", action='store_true', help="Enable debug output")
        parser.add_argument("-m", "--multitarget", action='store_true', \
            help="Enable multi target mode")
        parser.add_argument("-r", "--root", help="Change projects root")
        parser.add_argument("-presync", "--presync-args", help="Pass additional args to presync script")
        parser.add_argument("-postsync", "--postsync-args", help="Pass additional args to postsync script")
        self.argsParsed = parser.parse_args()

    """
    Check presence of required bynary file
    """
    def binaryCheck(self, commandToCheck, isRequired):
        out.debug("[binaryCheck]: commandToCheck %s, isRequired %s" \
            % (commandToCheck, isRequired), self.Configuration.debugMode)
        executable = find_executable(commandToCheck)
        if executable and isRequired:
            out.success("Found required " + commandToCheck + " in path " + executable)
        if (executable and not isRequired):
            out.success("Found optional " + commandToCheck + " in path " + executable)
        elif (not executable and not isRequired):
            out.warning("Cannot find optional" + commandToCheck)
        elif (not executable and isRequired):
            out.fatalError("Cannot find requested " + commandToCheck)

    def createProjectsList(self):
        self.projectsList = {}
        if (os.path.isdir(self.Configuration.defaultProjectsRoot)):
            dirContent = os.listdir(self.Configuration.defaultProjectsRoot)
            dirContent.sort()
            index = 1
            for element in dirContent:
                if (os.path.isdir(self.Configuration.defaultProjectsRoot + "/" + element)):
                    self.projectsList[index] = element.strip()
                    index += 1
            out.debug(self.projectsList, self.Configuration.debugMode)
        else:
            out.fatalError("Invalid project root '" + self.Configuration.defaultProjectsRoot + "'")

        """
        Append slash to project root if missing
        """
        if self.Configuration.defaultProjectsRoot[-1:] != "/":
            self.Configuration.defaultProjectsRoot += "/"

    def createDestinationsList(self):
        self.destinationsList = {}
        filePath = self.targetFilePath
        if self.Configuration.multitargetMode:
            filePath = self.multiTargetFilePath

        targetsList = open(filePath, "r").readlines()

        index = 1
        for element in targetsList:
            if (not element.startswith('#') and (element != '\n')):
                self.destinationsList[index] = element.strip()
                index += 1

        if (len(self.destinationsList) < 1):
            out.fatalError("No entries in target file '" + filePath + "'")

    def selectFromList(self, selectionList, listTitle = "", multiColumn=True):
        if (listTitle == ""):
            listTitle = "%s [ \033[1;34m%s\033[0m ]: " % \
                (self.Configuration.dialogTitle, self.Configuration.defaultProjectsRoot)
        self.printList(selectionList, listTitle, multiColumn)

        choosed = False
        while (choosed == False):
            selection = raw_input(self.Configuration.deploySelectFromListMsg)
            out.debug("Selection input: " + selection, self.Configuration.debugMode)
            if selection == "0":
                self.abortDeploy()
            elif re.match(r'^(\d+)$', selection):
                selection = int(selection)
                if (selection > 0 and selection <= len(selectionList)):
                    choosed = True
                    out.debug("         SELECTION: " + str(selection), self.Configuration.debugMode)
                    out.debug("          SELECTED: '" + selectionList[selection] +  "'", self.Configuration.debugMode)
                    #self.confirmProjectSelection(selectionList[selection])
                else:
                    out.error("Invalid choice '\033[1;31m" + str(selection)
                    + "\033[0m', please insert only the number corresponding to an element of the list.\n")
            else:
                out.error("Invalid choice '\033[1;31m" + str(selection)
                + "\033[0m', please insert only the number corresponding to an element of the list.\n")

        return selection

    def selectTargets(self):
        if (not os.path.isdir(self.projectConfigDir)):
            out.warning("Missing configuration directory, created empty at '\033[1;32m" + \
                self.projectConfigDir + "\033[0m'")
            os.mkdir(self.projectConfigDir)

        self.targetFilePath = self.projectConfigDir + "/" + self.Configuration.syncTargetsFile
        self.multiTargetFilePath = self.projectConfigDir + "/" + self.Configuration.syncMultiTargetsFile

        self.targetsAvailable = os.path.isfile(self.targetFilePath)
        self.multiTargetsAvailable = os.path.isfile(self.multiTargetFilePath)

        if ((self.targetsAvailable == False) \
            and (self.multiTargetsAvailable == False)):
            out.fatalError("No targets file detected!")

        if (self.multiTargetsAvailable):
            answer = confirm.getConfirm("Enable multi target mode for this project? [y/N]:")
            if (answer == True):
                self.Configuration.multitargetMode = True
                out.success("Multi targets mode ENABLED")

        self.ignoreFile = os.path.isfile(self.projectConfigDir + "/" + self.Configuration.syncIgnoresFile)

    #~ Print numbered formatted list
    def printList(self, listData, listHeader="Select an element from list:", multiColumn=True):
        #~ List header with empty line before
        print "\n%s\n" % (listHeader)

        elementId = 0
        for elementId in listData:
            if multiColumn == True:
                sys.stdout.write( \
                    "[\033[1;34m%4d\033[0m]: %-25s" \
                    % (elementId, listData[elementId][0:24]) \
                )

                if (elementId % 3) == 0:
                    sys.stdout.write('\n')
            else:
                print "[\033[1;34m%4d\033[0m]: %s" % (elementId, listData[elementId])

        sys.stdout.write('\n')

        if (elementId % 3) != 0:
            sys.stdout.write('\n')

    def init(self):
        subprocess.call("clear")

        """
        Create base config object as default config
        """
        self.Configuration = ProjectDeployConfiguration()
        self.setArgParser()

        """
        Set deploy config
        """
        self.setDeployConfig()

    """
    Global counters
    """
    def initGlobalCounter(self):
        self.syncSuccess = 0
        self.syncFailed = 0
        self.syncTotal = 0


    def binaryChecks(self):
        subprocess.call("clear")
        # Check binary files
        self.binaryCheck("git", False)
        self.binaryCheck("rsync", True)

    def selectProject(self):
        subprocess.call("clear")
        # Project list creation and selection
        self.createProjectsList()
        selection = self.selectFromList(self.projectsList)

        self.projectConfigDir = self.Configuration.basePath
        self.projectConfigDir += "/" + self.projectsList[selection]
        self.projectSourceDir = self.Configuration.defaultProjectsRoot
        self.projectSourceDir += self.projectsList[selection]

        self.lockFile = self.projectConfigDir + "/"
        self.lockFile += self.projectsList[selection] + ".lock"

        self.selectedProject = os.path.basename(self.projectConfigDir)
        global lockFile
        lockFile = self.lockFile
        if os.path.isfile(self.lockFile):
            out.fatalError("Error a deploy for the same project is already in progress!")

        self.setLockFile()
        print ""
        out.success("Selected element '" + out.bgreen(self.projectsList[selection]) + "'")


    """
    Targets list creation and selection
    """
    def selectTarget(self):
        self.selectTargets()
        self.createDestinationsList()

        if self.Configuration.multitargetMode == False:
            subprocess.call("clear")
            selection = self.selectFromList(self.destinationsList, "Choose a destination from targets list: ", False)
            print ""
            out.success("Selected element '\033[1;32m" + self.destinationsList[selection] + "\033[0m'")
            self.selectedTarget = self.destinationsList[selection]

    """
    Print selection recap
    """
    def printRecap(self):
        subprocess.call("clear")
        print out.bgreen("\nDeploy Recap:\n")
        print "Projects root            : %s" % out.bgreen(self.Configuration.defaultProjectsRoot)
        print "Project config directory : %s" % out.bgreen(self.projectConfigDir)
        print "Multi target mode        : %s" % out.bgreen(self.Configuration.multitargetMode)

        if self.ignoreFile == True:
            print "Ignore file              : %s" % out.bgreen(self.projectConfigDir + "/" + self.Configuration.syncIgnoresFile)

        print "Selected source directory: %s" % out.bgreen(self.projectSourceDir)

        if self.Configuration.multitargetMode == False:
            print "Selected target directory: %s" % out.bgreen(self.selectedTarget)
        else:
            for target in self.destinationsList:
                print "Selected target directory: %s" % out.bgreen(self.destinationsList[target])

    """
    Run sync command and simulation
    """
    def startSync(self, target, dryrun=True):
        syncCommand = "rsync " + self.Configuration.rsyncOptions + " "

        if dryrun == True:  # Dry run?
            syncCommand += "--dry-run "

        if self.ignoreFile == True:
            syncCommand += "--exclude-from=" + self.projectConfigDir + "/" + self.Configuration.syncIgnoresFile + " "

        syncCommand += self.projectSourceDir + "/ " + target

        #if  self.Configuration.verboseMode == True:
        #    syncCommand += " &> ${TEMP_FILE}"

        self.syncTotal += 1

        try:
            p = subprocess.Popen(\
                shlex.split(syncCommand), \
                shell=False, \
                stdin=subprocess.PIPE, \
                stdout=subprocess.PIPE, \
                stderr=subprocess.PIPE, \
                cwd=self.projectSourceDir)
            commandOutput, commandError = p.communicate()
            exitStatus = p.returncode
        except:
            out.fatalError("Failed to execute command " + syncCommand)

        if exitStatus == 0:
            self.syncSuccess += 1
            out.success("Successful sync to '" + out.bgreen(target) + "'")
        else:
            self.syncFailed += 1
            out.error("Failed sync to '" + out.bred(target) + "'")
            for error in commandError.split('\n'):
                out.error(error)

    """
    Check and execute a sync script
    """
    def callSync(self, syncScript):
        if os.path.isfile(syncScript):
            os.chmod(syncScript, 0700)

            try:
                exitStatus = subprocess.call(shlex.split(syncScript))
            except:
                self.unsetLockFile()
                out.fatalError("Failed execution script " + syncScript)

            if exitStatus != 0:
                self.unsetLockFile()
                out.fatalError("Execution " + syncScript + " script error!")
            out.success("Execution " + syncScript + " script success!")

    def singleDeploy(self):
        subprocess.call("clear")
        out.success("Start single target deploy")

        """
        Call pre sync script
        """
        self.callSync(self.projectConfigDir + "/" + self.Configuration.syncPreFile)

        if (not confirm.getConfirm("Start presync script? [y/N]:")):
            self.abortDeploy()

        """
        Start simulation deploy
        """
        self.initGlobalCounter()
        self.startSync(self.selectedTarget, True)

        """
        Start real deploy
        """
        if (not confirm.getConfirm("Start REAL deploy? [y/N]:")):
            self.abortDeploy()

        self.initGlobalCounter()
        self.startSync(self.selectedTarget, False)

        """
        Call post sync script
        """
        self.callSync(self.projectConfigDir + "/" + self.Configuration.syncPostFile)

    def multiDeploy(self):
        subprocess.call("clear")
        out.success("Start multi target deploy")

        """
        Call pre sync script
        """
        self.callSync(self.projectConfigDir + "/" + self.Configuration.syncPreFile)

        if (not confirm.getConfirm("Start presync script? [y/N]:")):
            self.abortDeploy()

        """
        Start simulations multi deploy
        """
        self.initGlobalCounter()
        for target in self.destinationsList:
            self.startSync(self.destinationsList[target], True)

        if (not confirm.getConfirm("Start REAL multi deploy? [y/N]:")):
            self.abortDeploy()

        """
        Start real multi deploy
        """
        self.initGlobalCounter()
        for target in self.destinationsList:
            self.startSync(self.destinationsList[target], False)

        """
        Call post sync script
        """
        self.callSync(self.projectConfigDir + "/" + self.Configuration.syncPostFile)

    def setLockFile(self):
        command = "touch " + self.lockFile
        try:
            exitStatus = subprocess.call(shlex.split(command))
        except:
            out.fatalError("Failed execution command " + command)

        if exitStatus != 0:
            out.fatalError("Execution " + command + " command error!")
        out.success("Execution " + command + " command success!")

    def unsetLockFile(self):
        command = "rm " + self.lockFile
        exitStatus = 0
        try:
            if os.path.isfile(lockFile):
                exitStatus = subprocess.call(shlex.split(command))
                out.success("Removed lockfile " + lockFile)
        except:
            out.fatalError("Failed execution command " + command)

        if exitStatus != 0:
            out.fatalError("Execution " + command + " command error!")
        out.success("Execution " + command + " command success!")

    def abortDeploy(self):
        self.unsetLockFile()
        out.warning(out.byellow(self.Configuration.deployAbortMsg))

        if os.path.isfile(self.projectConfigDir + "/webhooks"):
            out.success("webhooks config file founded")
            config = ConfigParser.ConfigParser()
            config.read(self.projectConfigDir + "/webhooks")

            self.webhook = webHooks()
            self.hook_color = "#DDB100"
            self.hook_message = self.Configuration.deployAbortMsg

            for section in config.sections():
                if not config.has_option(section, 'baseurl'):
                    out.fatalError("Missing baseurl config for webhook '" + section + "'")

                if not config.has_option(section, 'requesturl'):
                    out.fatalError("Missing requesturl config for webhook '" + section + "'")

                self.webhook.setBaseUrl(config.get(section, 'baseurl'))
                self.webhook.setRequestUrl(config.get(section, 'requesturl'))
                self.session_info = utils.getSessionInfo()
                if not config.has_option(section, 'requesturl'):
                    out.fatalError("Missing payload template config for webhook '" + section + "'")

                payload = config.get(section, 'payloadtemplate')
                payload = self.populatePayloadTemplate(payload)

                self.webhook.setPayload(payload)
                self.webhook.doRequest()

        sys.exit(0)

    def populatePayloadTemplate(self, payload):
        print payload

        payload.replace(u'%COLOR%', self.hook_color)
        payload.replace(u'%TITLE%', self.hook_message)
        payload.replace(u'%FALLBACK%', self.hook_message)
        payload.replace(u'%PROJECT%', self.selectedProject)
        payload.replace(u'%SESSION_USERNAME%', self.session_info['username'])
        payload.replace(u'%SESSION_HOSTNAME%', self.session_info['hostname'])
        payload.replace(u'%SESSION_IPADDRESS%', self.session_info['ipaddress'])
        payload.replace(u'%SOURCEDIR%', self.projectSourceDir)
        payload.replace(u'%TARGET%', self.selectedTarget)

        print payload

        return payload

    def __init__(self):
        self.init()
        self.initGlobalCounter()
        self.binaryChecks()
        self.selectProject()
        self.selectTarget()
        self.printRecap()

        if (not confirm.getConfirm("Start simulation deploy? [y/N]:")):
            self.abortDeploy()

        if os.path.isfile(self.projectConfigDir + "/webhooks"):
            out.success("webhooks config file founded")
            config = ConfigParser.ConfigParser()
            config.read(self.projectConfigDir + "/webhooks")

            self.webhook = webHooks()
            self.hook_color = "#DDB100"
            self.hook_message = self.Configuration.deployAbortMsg

            for section in config.sections():
                if not config.has_option(section, 'baseurl'):
                    out.fatalError("Missing baseurl config for webhook '" + section + "'")

                if not config.has_option(section, 'requesturl'):
                    out.fatalError("Missing requesturl config for webhook '" + section + "'")

                self.webhook.setBaseUrl(config.get(section, 'baseurl'))
                self.webhook.setRequestUrl(config.get(section, 'requesturl'))
                self.session_info = utils.getSessionInfo()
                if not config.has_option(section, 'requesturl'):
                    out.fatalError("Missing payload template config for webhook '" + section + "'")

                payload = config.get(section, 'payloadtemplate')
                payload = self.populatePayloadTemplate(payload)

                self.webhook.setPayload(payload)
                self.webhook.doRequest()

        previousDir = os.getcwd()
        os.chdir(self.projectSourceDir)

        if os.getcwd() == previousDir:
            out.fatalError("Failed to change dir to " + self.projectSourceDir)

        if self.Configuration.multitargetMode == True:
            self.multiDeploy()
        else:
            self.singleDeploy()

        if self.syncFailed == 0:
            self.hook_message = "Operation completed successfully."
            self.hook_color = "#00CB3A"
            out.success(self.hook_message)
            out.success("Success " + str(self.syncSuccess) + " / " + str(self.syncTotal))
        elif self.syncSuccess > 0 and self.syncFailed > 0:
            self.hook_message = "Operation completed with " + out.bred("ERRORS") + "!"
            self.hook_color = "#DDB100"
            out.warning(self.hook_message)
            out.warning("Success " + str(self.syncSuccess) + " / " + str(self.syncTotal))
        else:
            self.hook_message = "Operation FAILED!"
            self.hook_color = "#E20500"
            out.error(self.hook_message)
            out.error("Success " + str(self.syncSuccess) + " / " + str(self.syncTotal))

        if os.path.isfile(self.projectConfigDir + "/webhooks"):
            out.success("webhooks config file founded")
            config = ConfigParser.ConfigParser()
            config.read(self.projectConfigDir + "/webhooks")

            self.webhook = webHooks()
            self.hook_color = "#DDB100"
            self.hook_message = self.Configuration.deployAbortMsg

            for section in config.sections():
                if not config.has_option(section, 'baseurl'):
                    out.fatalError("Missing baseurl config for webhook '" + section + "'")

                if not config.has_option(section, 'requesturl'):
                    out.fatalError("Missing requesturl config for webhook '" + section + "'")

                self.webhook.setBaseUrl(config.get(section, 'baseurl'))
                self.webhook.setRequestUrl(config.get(section, 'requesturl'))
                self.session_info = utils.getSessionInfo()
                if not config.has_option(section, 'requesturl'):
                    out.fatalError("Missing payload template config for webhook '" + section + "'")

                payload = config.get(section, 'payloadtemplate')
                payload = self.populatePayloadTemplate(payload)

                self.webhook.setPayload(payload)
                self.webhook.doRequest()

        self.unsetLockFile()

if __name__ == "__main__":
    global lockFile
    try:
        projectdeploy = ProjectDeploy()
    except KeyboardInterrupt as e:
        print "\n"
        try:
            if os.path.isfile(lockFile):
                subprocess.call(shlex.split("rm " + lockFile))
                out.success("Removed lockfile " + lockFile)
        except:
            pass
        out.warning("CTRL-C detected, deploy aborted!")
